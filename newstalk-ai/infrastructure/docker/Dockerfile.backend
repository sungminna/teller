# Multi-stage build for NewsTalk AI Backend with Poetry - Stage 8 Production Ready
FROM python:3.11-slim as builder

# Build arguments
ARG BUILD_ENV=production
ARG POETRY_VERSION=1.7.1

# Install system dependencies for building
RUN apt-get update && apt-get install -y \
    gcc \
    g++ \
    curl \
    git \
    build-essential \
    libpq-dev \
    && rm -rf /var/lib/apt/lists/*

# Install Poetry
RUN pip install --no-cache-dir poetry==$POETRY_VERSION

WORKDIR /app

# Copy Poetry configuration files
COPY pyproject.toml poetry.lock ./

# Configure Poetry to create venv in project directory
RUN poetry config virtualenvs.create true && \
    poetry config virtualenvs.in-project true && \
    poetry config virtualenvs.path .venv

# Install dependencies using Poetry and verify .venv creation
RUN poetry install --only=main --no-root && \
    ls -la /app/.venv && \
    echo "Virtual environment created successfully"

# Production stage
FROM python:3.11-slim as runtime

# Build arguments for runtime stage
ARG POETRY_VERSION=1.7.1

# Labels for metadata
LABEL maintainer="NewsTalk AI Team <dev@newstalk.ai>"
LABEL version="1.0.0"
LABEL description="NewsTalk AI Backend Service with Poetry"

# Create non-root user with specific UID/GID
RUN groupadd -r -g 1001 newstalk && \
    useradd -r -g newstalk -u 1001 -m -s /bin/bash newstalk

# Install runtime dependencies
RUN apt-get update && apt-get install -y \
    curl \
    libpq5 \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Copy virtual environment from builder stage
COPY --from=builder --chown=newstalk:newstalk /app/.venv /app/.venv

# Set working directory
WORKDIR /app

# Copy backend application code and Poetry files
COPY --chown=newstalk:newstalk backend/ ./backend/
COPY --chown=newstalk:newstalk pyproject.toml poetry.lock ./

# Create necessary directories
RUN mkdir -p /app/logs /app/tmp && \
    chown -R newstalk:newstalk /app

# Switch to non-root user
USER newstalk

# Set environment variables
ENV PYTHONPATH=/app \
    PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PORT=8000 \
    PATH="/app/.venv/bin:$PATH"

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
    CMD curl -f http://localhost:${PORT}/health || exit 1

# Expose port
EXPOSE ${PORT}

# Run application directly using virtual environment
CMD ["/app/.venv/bin/python", "-m", "uvicorn", "backend.api.main:app", "--host", "0.0.0.0", "--port", "8000", "--workers", "4", "--access-log"] 