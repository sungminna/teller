# Multi-stage build for NewsTalk AI LangGraph Service with Poetry - Stage 8
FROM python:3.11-slim as builder

# Build arguments
ARG BUILD_ENV=production
ARG POETRY_VERSION=1.7.1

# Labels for metadata
LABEL maintainer="NewsTalk AI Team <dev@newstalk.ai>"
LABEL version="1.0.0"
LABEL description="NewsTalk AI LangGraph Agents Service with Poetry"

# Install system dependencies for building
RUN apt-get update && apt-get install -y \
    gcc \
    g++ \
    curl \
    git \
    build-essential \
    libpq-dev \
    && rm -rf /var/lib/apt/lists/*

# Install Poetry
RUN pip install --no-cache-dir poetry==$POETRY_VERSION

WORKDIR /app

# Copy Poetry configuration files
COPY pyproject.toml poetry.lock ./

# Export dependencies to requirements.txt using Poetry
RUN poetry export -f requirements.txt --output requirements.txt --without-hashes

# Create virtual environment and install dependencies with AI/ML optimizations
RUN python -m venv /app/venv && \
    /app/venv/bin/pip install --no-cache-dir --upgrade pip && \
    /app/venv/bin/pip install --no-cache-dir -r requirements.txt

# Production stage
FROM python:3.11-slim as runtime

# Create non-root user with specific UID/GID
RUN groupadd -r -g 1002 langgraph && \
    useradd -r -g langgraph -u 1002 -m -s /bin/bash langgraph

# Install runtime dependencies
RUN apt-get update && apt-get install -y \
    curl \
    libpq5 \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Copy virtual environment from builder stage
COPY --from=builder --chown=langgraph:langgraph /app/venv /app/venv

# Add virtual environment to PATH
ENV PATH="/app/venv/bin:$PATH"

# Set working directory
WORKDIR /app

# Copy backend application code (LangGraph는 backend의 일부)
COPY --chown=langgraph:langgraph backend/ ./backend/
COPY --chown=langgraph:langgraph pyproject.toml poetry.lock ./

# Create necessary directories
RUN mkdir -p /app/logs /app/tmp /app/checkpoints && \
    chown -R langgraph:langgraph /app

# Switch to non-root user
USER langgraph

# Set environment variables for LangGraph
ENV PYTHONPATH=/app \
    PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    LANGGRAPH_SERVICE_PORT=8001 \
    LANGGRAPH_CHECKPOINT_DIR=/app/checkpoints \
    LANGGRAPH_MAX_WORKERS=4 \
    LANGGRAPH_MEMORY_LIMIT=2048

# Health check for LangGraph service
HEALTHCHECK --interval=30s --timeout=15s --start-period=60s --retries=3 \
    CMD python -c "import requests; requests.get('http://localhost:8001/health', timeout=10)" || exit 1

# Expose port
EXPOSE 8001

# Run LangGraph service
CMD ["python", "-m", "backend.langgraph.main", "--host", "0.0.0.0", "--port", "8001", "--workers", "4"] 