# Multi-stage build for NewsTalk AI Stream Processor - Stage 8
FROM python:3.11-slim as builder

# Build arguments
ARG BUILD_ENV=production
ARG POETRY_VERSION=1.7.1

# Labels for metadata
LABEL maintainer="NewsTalk AI Team <dev@newstalk.ai>"
LABEL version="1.0.0"
LABEL description="NewsTalk AI Stream Processor Service"

# Install system dependencies for building
RUN apt-get update && apt-get install -y \
    gcc \
    g++ \
    curl \
    git \
    build-essential \
    libpq-dev \
    librdkafka-dev \
    && rm -rf /var/lib/apt/lists/*

# Install Poetry
RUN pip install --no-cache-dir poetry==$POETRY_VERSION

# Configure Poetry
ENV POETRY_NO_INTERACTION=1 \
    POETRY_VENV_IN_PROJECT=1 \
    POETRY_CACHE_DIR=/tmp/poetry_cache \
    POETRY_INSTALLER_PARALLEL=true

WORKDIR /app

# Copy dependency files
COPY pyproject.toml poetry.lock ./

# Install dependencies
RUN poetry install --no-dev --no-root && rm -rf $POETRY_CACHE_DIR

# Production stage
FROM python:3.11-slim as runtime

# Create non-root user with specific UID/GID
RUN groupadd -r -g 1003 streamproc && \
    useradd -r -g streamproc -u 1003 -m -s /bin/bash streamproc

# Install runtime dependencies
RUN apt-get update && apt-get install -y \
    curl \
    libpq5 \
    librdkafka1 \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Copy virtual environment from builder stage
ENV VIRTUAL_ENV=/app/.venv
COPY --from=builder --chown=streamproc:streamproc ${VIRTUAL_ENV} ${VIRTUAL_ENV}

# Add virtual environment to PATH
ENV PATH="$VIRTUAL_ENV/bin:$PATH"

# Set working directory
WORKDIR /app

# Copy application code
COPY --chown=streamproc:streamproc . .

# Create necessary directories
RUN mkdir -p /app/logs /app/tmp && \
    chown -R streamproc:streamproc /app

# Switch to non-root user
USER streamproc

# Set environment variables for Stream Processor
ENV PYTHONPATH=/app \
    PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    STREAM_PROCESSOR_PORT=8002 \
    STREAM_BATCH_SIZE=100 \
    STREAM_PROCESSING_INTERVAL=10 \
    KAFKA_CONSUMER_GROUP=newstalk-stream-processor

# Health check for Stream Processor
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
    CMD python -c "from api.utils.stream_processor import health_check; health_check()" || exit 1

# Expose port
EXPOSE 8002

# Run Stream Processor service
CMD ["python", "-m", "api.utils.stream_processor"] 