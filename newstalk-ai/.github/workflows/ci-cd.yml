name: NewsTalk AI CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'backend/**'
      - 'infrastructure/**'
      - '.github/workflows/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'backend/**'
      - 'infrastructure/**'
      - '.github/workflows/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: newstalk-ai
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  # Stage 1: Code Quality and Testing
  test:
    name: Code Quality & Testing
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.11']
        test-type: ['unit', 'integration', 'security']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache Poetry dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pypoetry
        key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
        restore-keys: |
          ${{ runner.os }}-poetry-

    - name: Install Poetry
      run: |
        curl -sSL https://install.python-poetry.org | python3 -
        echo "$HOME/.local/bin" >> $GITHUB_PATH

    - name: Install dependencies
      working-directory: ./backend
      run: |
        poetry install --with dev

    - name: Run code formatting check
      working-directory: ./backend
      run: |
        poetry run black --check .
        poetry run isort --check-only .

    - name: Run linting
      working-directory: ./backend
      run: |
        poetry run flake8 .
        poetry run mypy .

    - name: Run unit tests
      if: matrix.test-type == 'unit'
      working-directory: ./backend
      run: |
        poetry run pytest tests/unit/ -v --cov=. --cov-report=xml --cov-report=html
      env:
        ENVIRONMENT: test
        DATABASE_URL: sqlite:///test.db
        REDIS_URL: redis://localhost:6379/1

    - name: Run integration tests
      if: matrix.test-type == 'integration'
      working-directory: ./backend
      run: |
        poetry run pytest tests/integration/ -v
      env:
        ENVIRONMENT: test
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        REDIS_URL: redis://localhost:6379/1
        KAFKA_BOOTSTRAP_SERVERS: localhost:9092

    - name: Run security tests
      if: matrix.test-type == 'security'
      working-directory: ./backend
      run: |
        poetry run bandit -r . -f json -o bandit-report.json
        poetry run safety check --json --output safety-report.json

    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.test-type }}-${{ matrix.python-version }}
        path: |
          backend/htmlcov/
          backend/coverage.xml
          backend/bandit-report.json
          backend/safety-report.json

  # Stage 2: Build Docker Images
  build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name != 'pull_request'
    outputs:
      backend-image: ${{ steps.meta-backend.outputs.tags }}
      langgraph-image: ${{ steps.meta-langgraph.outputs.tags }}
      airflow-image: ${{ steps.meta-airflow.outputs.tags }}
      stream-processor-image: ${{ steps.meta-stream-processor.outputs.tags }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    # Backend Service
    - name: Extract metadata for Backend
      id: meta-backend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ github.repository }}/backend
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Backend image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        file: ./infrastructure/docker/Dockerfile.backend
        push: true
        tags: ${{ steps.meta-backend.outputs.tags }}
        labels: ${{ steps.meta-backend.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILD_ENV=production

    # LangGraph Service
    - name: Extract metadata for LangGraph
      id: meta-langgraph
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ github.repository }}/langgraph
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push LangGraph image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        file: ./infrastructure/docker/Dockerfile.langgraph
        push: true
        tags: ${{ steps.meta-langgraph.outputs.tags }}
        labels: ${{ steps.meta-langgraph.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILD_ENV=production

    # Airflow Service
    - name: Extract metadata for Airflow
      id: meta-airflow
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ github.repository }}/airflow
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Airflow image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        file: ./infrastructure/docker/Dockerfile.airflow
        push: true
        tags: ${{ steps.meta-airflow.outputs.tags }}
        labels: ${{ steps.meta-airflow.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILD_ENV=production

    # Stream Processor Service
    - name: Extract metadata for Stream Processor
      id: meta-stream-processor
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ github.repository }}/stream-processor
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Stream Processor image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        file: ./infrastructure/docker/Dockerfile.stream-processor
        push: true
        tags: ${{ steps.meta-stream-processor.outputs.tags }}
        labels: ${{ steps.meta-stream-processor.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILD_ENV=production

  # Stage 3: Security Scanning
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name != 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ needs.build.outputs.backend-image }}
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Stage 4: Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, security-scan]
    if: github.ref == 'refs/heads/develop' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure kubectl
      uses: azure/k8s-set-context@v3
      with:
        method: kubeconfig
        kubeconfig: ${{ secrets.KUBE_CONFIG_STAGING }}

    - name: Update image tags in manifests
      run: |
        # Update image tags in Kubernetes manifests
        sed -i "s|newstalk-ai/backend:latest|${{ needs.build.outputs.backend-image }}|g" infrastructure/k8s/backend-deployment.yaml
        sed -i "s|newstalk-ai/langgraph:latest|${{ needs.build.outputs.langgraph-image }}|g" infrastructure/k8s/backend-deployment.yaml
        sed -i "s|newstalk-ai/airflow:latest|${{ needs.build.outputs.airflow-image }}|g" infrastructure/k8s/airflow-deployment.yaml
        sed -i "s|newstalk-ai/stream-processor:latest|${{ needs.build.outputs.stream-processor-image }}|g" infrastructure/k8s/backend-deployment.yaml

    - name: Deploy to staging
      run: |
        kubectl apply -f infrastructure/k8s/namespace.yaml
        kubectl apply -f infrastructure/k8s/configmap.yaml
        kubectl apply -f infrastructure/k8s/secrets.yaml
        kubectl apply -f infrastructure/k8s/postgres-deployment.yaml
        kubectl apply -f infrastructure/k8s/redis-deployment.yaml
        kubectl apply -f infrastructure/k8s/kafka-deployment.yaml
        kubectl apply -f infrastructure/k8s/backend-deployment.yaml
        kubectl apply -f infrastructure/k8s/airflow-deployment.yaml
        kubectl apply -f infrastructure/k8s/ingress.yaml

    - name: Wait for deployment
      run: |
        kubectl rollout status deployment/fastapi-backend -n newstalk-ai --timeout=600s
        kubectl rollout status deployment/langgraph-service -n newstalk-ai --timeout=600s
        kubectl rollout status deployment/airflow-webserver -n newstalk-ai --timeout=600s

    - name: Run smoke tests
      run: |
        # Wait for services to be ready
        sleep 60
        
        # Test API endpoint
        kubectl port-forward svc/fastapi-backend 8000:8000 -n newstalk-ai &
        sleep 10
        curl -f http://localhost:8000/health || exit 1
        
        # Test Airflow
        kubectl port-forward svc/airflow-webserver 8080:8080 -n newstalk-ai &
        sleep 10
        curl -f http://localhost:8080/health || exit 1

  # Stage 5: Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, security-scan]
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure kubectl
      uses: azure/k8s-set-context@v3
      with:
        method: kubeconfig
        kubeconfig: ${{ secrets.KUBE_CONFIG_PRODUCTION }}

    - name: Update image tags in manifests
      run: |
        # Update image tags in Kubernetes manifests
        sed -i "s|newstalk-ai/backend:latest|${{ needs.build.outputs.backend-image }}|g" infrastructure/k8s/backend-deployment.yaml
        sed -i "s|newstalk-ai/langgraph:latest|${{ needs.build.outputs.langgraph-image }}|g" infrastructure/k8s/backend-deployment.yaml
        sed -i "s|newstalk-ai/airflow:latest|${{ needs.build.outputs.airflow-image }}|g" infrastructure/k8s/airflow-deployment.yaml
        sed -i "s|newstalk-ai/stream-processor:latest|${{ needs.build.outputs.stream-processor-image }}|g" infrastructure/k8s/backend-deployment.yaml

    - name: Blue-Green Deployment
      run: |
        # Create green deployment
        kubectl apply -f infrastructure/k8s/namespace.yaml
        kubectl apply -f infrastructure/k8s/configmap.yaml
        kubectl apply -f infrastructure/k8s/secrets.yaml
        
        # Deploy infrastructure first
        kubectl apply -f infrastructure/k8s/postgres-deployment.yaml
        kubectl apply -f infrastructure/k8s/redis-deployment.yaml
        kubectl apply -f infrastructure/k8s/kafka-deployment.yaml
        
        # Wait for infrastructure
        kubectl rollout status deployment/postgres -n newstalk-ai --timeout=300s
        kubectl rollout status deployment/redis -n newstalk-ai --timeout=300s
        kubectl rollout status deployment/kafka -n newstalk-ai --timeout=300s
        
        # Deploy application services
        kubectl apply -f infrastructure/k8s/backend-deployment.yaml
        kubectl apply -f infrastructure/k8s/airflow-deployment.yaml
        
        # Wait for application deployment
        kubectl rollout status deployment/fastapi-backend -n newstalk-ai --timeout=600s
        kubectl rollout status deployment/langgraph-service -n newstalk-ai --timeout=600s
        kubectl rollout status deployment/airflow-webserver -n newstalk-ai --timeout=600s

    - name: Run production health checks
      run: |
        # Wait for services to stabilize
        sleep 120
        
        # Health check script
        kubectl port-forward svc/fastapi-backend 8000:8000 -n newstalk-ai &
        sleep 10
        
        # Comprehensive health checks
        curl -f http://localhost:8000/health || exit 1
        curl -f http://localhost:8000/api/v1/health || exit 1
        
        # Check monitoring endpoints
        curl -f http://localhost:8000/metrics || exit 1

    - name: Update ingress
      run: |
        kubectl apply -f infrastructure/k8s/ingress.yaml

    - name: Notify deployment success
      uses: 8398a7/action-slack@v3
      if: success()
      with:
        status: success
        channel: '#newstalk-deployments'
        text: '🚀 NewsTalk AI successfully deployed to production!'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

    - name: Notify deployment failure
      uses: 8398a7/action-slack@v3
      if: failure()
      with:
        status: failure
        channel: '#newstalk-alerts'
        text: '❌ NewsTalk AI production deployment failed!'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Stage 6: Post-deployment monitoring
  post-deployment:
    name: Post-deployment Monitoring
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: always() && (needs.deploy-production.result == 'success')
    
    steps:
    - name: Wait for system stabilization
      run: sleep 300

    - name: Run performance tests
      run: |
        # Load testing with k6 or similar
        echo "Running performance tests..."
        # Add actual performance test commands here

    - name: Check monitoring metrics
      run: |
        # Check Prometheus metrics
        echo "Checking system metrics..."
        # Add metric validation commands here

    - name: Update deployment status
      uses: 8398a7/action-slack@v3
      with:
        status: success
        channel: '#newstalk-deployments'
        text: '✅ NewsTalk AI post-deployment checks completed successfully!'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }} 